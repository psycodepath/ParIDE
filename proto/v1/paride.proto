syntax = "proto3";

package paride.api.v1;

option go_package = "github.com/psycodepath/paride/gen/paride_api_v1";

// Import common types
import "google/protobuf/timestamp.proto";

// ParIDE service definition
service ParIDEService {
  // Session management
  rpc CreateSession(CreateSessionRequest) returns (CreateSessionResponse);
  rpc JoinSession(JoinSessionRequest) returns (JoinSessionResponse);
  rpc LeaveSession(LeaveSessionRequest) returns (LeaveSessionResponse);
  
  // File operations
  rpc ListFiles(ListFilesRequest) returns (ListFilesResponse);
  rpc ReadFile(ReadFileRequest) returns (stream ReadFileResponse);
  
  // Editor commands
  rpc ListEditorCommands(ListEditorCommandsRequest) returns (ListEditorCommandsResponse);
  
  // Chat functionality
  rpc SendChatMessage(SendChatMessageRequest) returns (SendChatMessageResponse);
  rpc GetChatHistory(GetChatHistoryRequest) returns (GetChatHistoryResponse);
  rpc ChatEvents(stream ChatEventRequest) returns (stream ChatEventResponse);
  
  // Streaming edit events
  rpc EditEvents(stream EditEventRequest) returns (stream EditEventResponse);
}

// Common types
message Position {
  int32 line = 1;
  int32 character = 2;
}

message Range {
  Position start = 1;
  Position end = 2;
}

message Participant {
  string id = 1;
  string name = 2;
  ParticipantRole role = 3;
  bool is_host = 4;
  google.protobuf.Timestamp joined_at = 5;
}

enum ParticipantRole {
  PARTICIPANT_ROLE_UNSPECIFIED = 0;
  PARTICIPANT_ROLE_OBSERVER = 1;
  PARTICIPANT_ROLE_CONTRIBUTOR = 2;
  PARTICIPANT_ROLE_HOST = 3;
}

message FileInfo {
  string path = 1;
  int64 size = 2;
  google.protobuf.Timestamp last_modified = 3;
  bool is_directory = 4;
  FilePermissions permissions = 5;
  bool is_locked = 6;
  string locked_by_participant = 7;
}

message FilePermissions {
  bool can_read = 1;
  bool can_write = 2;
  bool can_delete = 3;
}

// Session management messages
message SessionSettings {
  int32 max_participants = 1;
  bool allow_observers = 2;
  repeated string restricted_files = 3;
  int32 session_timeout_minutes = 4;
  bool require_authentication = 5;
  ChatSettings chat_settings = 6;
}

message ChatSettings {
  bool enable_chat = 1;
  bool allow_code_snippets = 2;
  bool allow_file_references = 3;
  bool allow_reactions = 4;
  bool allow_message_editing = 5;
  bool allow_message_deletion = 6;
  int32 max_message_length = 7;
  int32 message_history_limit = 8; // Maximum messages to keep in history
  bool observers_can_chat = 9;
}

message CreateSessionRequest {
  string session_name = 1;
  SessionSettings settings = 2;
  string workspace_path = 3;
  string host_editor_type = 4;
}

message CreateSessionResponse {
  string session_id = 1;
  string invitation_token = 2;
  SessionSettings settings = 3;
  string host_id = 4;
}

message JoinSessionRequest {
  oneof session_identifier {
    string session_id = 1;
    string invitation_token = 2;
  }
  string participant_name = 3;
  string editor_type = 4;
  ParticipantRole requested_role = 5;
}

message JoinSessionResponse {
  string session_id = 1;
  string participant_id = 2;
  repeated Participant participants = 3;
  repeated FileInfo files = 4;
  SessionState current_state = 5;
}

message SessionState {
  repeated ParticipantCursor cursors = 1;
  repeated ParticipantSelection selections = 2;
  repeated string open_files = 3;
  repeated ChatMessage recent_chat_messages = 4; // Last few messages for context
  repeated ParticipantTypingStatus typing_status = 5;
}

message ParticipantTypingStatus {
  string participant_id = 1;
  bool is_typing = 2;
  string context = 3; // Optional context for what they're typing about
  google.protobuf.Timestamp last_activity = 4;
}

message ParticipantCursor {
  string participant_id = 1;
  string file_path = 2;
  Position position = 3;
  CursorStyle style = 4;
}

message CursorStyle {
  string color = 1;
  string participant_name = 2;
}

message ParticipantSelection {
  string participant_id = 1;
  string file_path = 2;
  Range range = 3;
  string color = 4;
}

message LeaveSessionRequest {
  string session_id = 1;
  string participant_id = 2;
}

message LeaveSessionResponse {
  bool success = 1;
  string message = 2;
  string new_host_id = 3; // If host left and ownership transferred
}

// File operation messages
message ListFilesRequest {
  string session_id = 1;
  string participant_id = 2;
  string path_filter = 3;  // Optional filter pattern
  bool include_hidden = 4;
}

message ListFilesResponse {
  repeated FileInfo files = 1;
  string workspace_root = 2;
}

message ReadFileRequest {
  string session_id = 1;
  string participant_id = 2;
  string file_path = 3;
  optional Range line_range = 4; // Optional for partial reading
}

message ReadFileResponse {
  oneof content {
    string text_chunk = 1;
    bytes binary_chunk = 2;
  }
  bool is_final_chunk = 3;
  string encoding = 4;
  int64 total_size = 5;
}

// Editor command messages
message EditorCommand {
  string id = 1;
  string name = 2;
  string description = 3;
  CommandPayloadSchema payload_schema = 4;
  repeated string required_permissions = 5;
  bool is_available = 6;
}

message CommandPayloadSchema {
  string schema_type = 1; // "json", "string", "object"
  string schema_definition = 2; // JSON schema or description
  repeated CommandParameter parameters = 3;
}

message CommandParameter {
  string name = 1;
  string type = 2;
  string description = 3;
  bool is_required = 4;
  string default_value = 5;
}

message ListEditorCommandsRequest {
  string session_id = 1;
  string participant_id = 2;
  string editor_type = 3; // Filter by editor type
}

message ListEditorCommandsResponse {
  repeated EditorCommand commands = 1;
  string editor_type = 2;
}

// Chat message types
message ChatMessage {
  string id = 1;
  string participant_id = 2;
  string participant_name = 3;
  string content = 4;
  google.protobuf.Timestamp timestamp = 5;
  ChatMessageType type = 6;
  string reply_to_message_id = 7; // For threaded conversations
  repeated ChatReaction reactions = 8;
  bool is_system_message = 9;
}

enum ChatMessageType {
  CHAT_MESSAGE_TYPE_UNSPECIFIED = 0;
  CHAT_MESSAGE_TYPE_TEXT = 1;
  CHAT_MESSAGE_TYPE_CODE_SNIPPET = 2;
  CHAT_MESSAGE_TYPE_FILE_REFERENCE = 3;
  CHAT_MESSAGE_TYPE_SYSTEM_NOTIFICATION = 4;
  CHAT_MESSAGE_TYPE_ANNOUNCEMENT = 5;
}

message ChatReaction {
  string participant_id = 1;
  string participant_name = 2;
  string emoji = 3;
  google.protobuf.Timestamp timestamp = 4;
}

message SendChatMessageRequest {
  string session_id = 1;
  string participant_id = 2;
  string content = 3;
  ChatMessageType type = 4;
  string reply_to_message_id = 5; // Optional, for replies
  ChatMessageContext context = 6; // Optional, for code snippets or file references
}

message ChatMessageContext {
  oneof context_type {
    CodeSnippetContext code_snippet = 1;
    FileReferenceContext file_reference = 2;
  }
}

message CodeSnippetContext {
  string language = 1;
  string file_path = 2; // Optional, if from a specific file
  Range range = 3; // Optional, if referencing specific lines
}

message FileReferenceContext {
  string file_path = 1;
  Range range = 2; // Optional, for specific lines
}

message SendChatMessageResponse {
  string message_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  bool success = 3;
  string error_message = 4;
}

message GetChatHistoryRequest {
  string session_id = 1;
  string participant_id = 2;
  int32 limit = 3; // Maximum number of messages to return
  string before_message_id = 4; // For pagination
  bool include_system_messages = 5;
}

message GetChatHistoryResponse {
  repeated ChatMessage messages = 1;
  bool has_more = 2; // True if there are more messages available
  string next_page_token = 3; // For pagination
}

message ChatEventRequest {
  string session_id = 1;
  string participant_id = 2;
  ChatEvent event = 3;
}

message ChatEventResponse {
  oneof response {
    ChatEventBroadcast broadcast = 1;
    ChatEventError error = 2;
    ChatEventAck acknowledgment = 3;
  }
}

message ChatEvent {
  string event_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  
  oneof event_type {
    SendMessageEvent send_message = 10;
    ReactToMessageEvent react_to_message = 11;
    DeleteMessageEvent delete_message = 12;
    EditMessageEvent edit_message = 13;
    TypingIndicatorEvent typing_indicator = 14;
  }
}

message SendMessageEvent {
  string content = 1;
  ChatMessageType type = 2;
  string reply_to_message_id = 3;
  ChatMessageContext context = 4;
}

message ReactToMessageEvent {
  string message_id = 1;
  string emoji = 2;
  bool remove_reaction = 3; // True to remove reaction, false to add
}

message DeleteMessageEvent {
  string message_id = 1;
  bool delete_for_everyone = 2; // If false, only hide for sender
}

message EditMessageEvent {
  string message_id = 1;
  string new_content = 2;
}

message TypingIndicatorEvent {
  bool is_typing = 1;
  string file_path = 2; // Optional context for what they're typing about
}

message ChatEventBroadcast {
  string participant_id = 1;
  ChatEvent event = 2;
  repeated string recipient_ids = 3; // Empty means broadcast to all
}

message ChatEventError {
  string event_id = 1;
  ErrorCode error_code = 2;
  string error_message = 3;
  string details = 4;
}

message ChatEventAck {
  string event_id = 1;
  bool success = 2;
  string message = 3;
  string message_id = 4; // For newly created messages
}

// Edit event messages
message EditEventRequest {
  string session_id = 1;
  string participant_id = 2;
  EditEvent event = 3;
}

message EditEventResponse {
  oneof response {
    EditEventBroadcast broadcast = 1;
    EditEventError error = 2;
    EditEventAck acknowledgment = 3;
  }
}

message EditEvent {
  string event_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  
  oneof event_type {
    MoveCursorEvent move_cursor = 10;
    InsertTextEvent insert_text = 11;
    SelectRangeEvent select_range = 12;
    UnselectRangeEvent unselect_range = 13;
    ExecuteCommandEvent execute_command = 14;
    CreateFileEvent create_file = 15;
    RemoveFileEvent remove_file = 16;
  }
}

message MoveCursorEvent {
  string file_path = 1;
  Position position = 2;
  CursorStyle style = 3;
}

message InsertTextEvent {
  string file_path = 1;
  Position position = 2;
  string text = 3;
  string operation_id = 4; // For conflict resolution
}

message SelectRangeEvent {
  string file_path = 1;
  Range range = 2;
  string selection_id = 3;
  string color = 4;
  bool is_multiple_selection = 5;
}

message UnselectRangeEvent {
  string file_path = 1;
  oneof target {
    string selection_id = 2;
    Range range = 3;
  }
  bool clear_all_selections = 4;
}

message ExecuteCommandEvent {
  string command_id = 1;
  string payload = 2; // JSON-encoded command parameters
  string target_file = 3; // Optional, if command targets specific file
}

message CreateFileEvent {
  string file_path = 1;
  bool is_directory = 2;
  string initial_content = 3; // For files only
}

message RemoveFileEvent {
  string file_path = 1;
  bool confirm_deletion = 2;
  bool create_backup = 3;
}

message EditEventBroadcast {
  string participant_id = 1;
  EditEvent event = 2;
  repeated string recipient_ids = 3; // Empty means broadcast to all
}

message EditEventError {
  string event_id = 1;
  ErrorCode error_code = 2;
  string error_message = 3;
  string details = 4;
}

message EditEventAck {
  string event_id = 1;
  bool success = 2;
  string message = 3;
}

enum ErrorCode {
  ERROR_CODE_UNSPECIFIED = 0;
  ERROR_CODE_SESSION_NOT_FOUND = 1;
  ERROR_CODE_PARTICIPANT_NOT_FOUND = 2;
  ERROR_CODE_PERMISSION_DENIED = 3;
  ERROR_CODE_FILE_NOT_FOUND = 4;
  ERROR_CODE_FILE_LOCKED = 5;
  ERROR_CODE_INVALID_OPERATION = 6;
  ERROR_CODE_CONFLICT_DETECTED = 7;
  ERROR_CODE_COMMAND_NOT_FOUND = 8;
  ERROR_CODE_INVALID_PAYLOAD = 9;
  ERROR_CODE_SESSION_FULL = 10;
  ERROR_CODE_AUTHENTICATION_FAILED = 11;
  ERROR_CODE_MESSAGE_NOT_FOUND = 12;
  ERROR_CODE_MESSAGE_TOO_LONG = 13;
  ERROR_CODE_CHAT_DISABLED = 14;
  ERROR_CODE_RATE_LIMITED = 15;
}

